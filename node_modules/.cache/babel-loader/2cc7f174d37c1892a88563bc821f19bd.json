{"ast":null,"code":"import _toConsumableArray from \"/home/vbg/Downloads/Kiran-Softwares/burger-builder/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/vbg/Downloads/Kiran-Softwares/burger-builder/src/components/Burger/Burger.js\";\nimport React from 'react';\nimport './Burger.css';\nimport BurgerIngredient from './BurgerIngrediant/BurgerIngrediant';\n\nvar burger = function burger(props) {\n  var transformedIngredients = Object.keys(props.ingredients).map(function (igKey) {\n    return _toConsumableArray(Array(props.ingredients[igKey])).map(function (_, i) {\n      return React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      });\n    }); //Transforming Key value pair into an array.\n  }).reduce(function (arr, el) {\n    //to check an empty array or if no ingredients\n    return arr.concat(el);\n  }, []); //Above code is to check array size is empty or not.\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Please start adding ingredients !!\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Burger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), transformedIngredients, React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["/home/vbg/Downloads/Kiran-Softwares/burger-builder/src/components/Burger/Burger.js"],"names":["React","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAEC,KAAF,EAAa;AACxB,MAAIC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EAC5BC,GAD4B,CACxB,UAAAC,KAAK,EAAI;AACV,WAAO,mBAAIC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,EAAqCD,GAArC,CAAyC,UAACG,CAAD,EAAIC,CAAJ,EAAU;AACvD,aAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,KAAK,GAAGG,CAA/B;AAAkC,QAAA,IAAI,EAAEH,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACF,KAFM,CAAP,CADU,CAGN;AACP,GAL4B,EAM5BI,MAN4B,CAMrB,UAACC,GAAD,EAAMC,EAAN,EAAa;AAAC;AAClB,WAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,GAR4B,EAQ1B,EAR0B,CAA7B,CADwB,CAWxB;;AACA,MAAIX,sBAAsB,CAACa,MAAvB,KAAkC,CAAtC,EAAyC;AACrCb,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAzB;AACH;;AAGD,SACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEMA,sBAFN,EAGI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAQH,CAzBD;;AA2BA,eAAeF,MAAf","sourcesContent":["import React from 'react';\nimport './Burger.css';\nimport BurgerIngredient from './BurgerIngrediant/BurgerIngrediant';\n\nconst burger = ( props ) => {\n    let transformedIngredients = Object.keys(props.ingredients)\n    .map(igKey => {\n        return [...Array(props.ingredients[igKey])].map((_, i) => {\n           return <BurgerIngredient key={igKey + i} type={igKey} />\n        }); //Transforming Key value pair into an array.\n    })\n    .reduce((arr, el) => {//to check an empty array or if no ingredients\n        return arr.concat(el) \n    }, []);\n   \n    //Above code is to check array size is empty or not.\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients !!</p>\n    }\n\n\n    return (\n        <div className=\"Burger\">\n            <BurgerIngredient type=\"bread-top\"/>\n             {transformedIngredients}\n            <BurgerIngredient type=\"bread-bottom\"/>\n        </div>\n\n    );\n}\n\nexport default burger;"]},"metadata":{},"sourceType":"module"}